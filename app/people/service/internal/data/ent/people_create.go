// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/genglsh/go-trainning-map/app/people/service/internal/data/ent/people"
)

// PeopleCreate is the builder for creating a People entity.
type PeopleCreate struct {
	config
	mutation *PeopleMutation
	hooks    []Hook
}

// SetIdnum sets the "idnum" field.
func (pc *PeopleCreate) SetIdnum(s string) *PeopleCreate {
	pc.mutation.SetIdnum(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PeopleCreate) SetName(s string) *PeopleCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetTelephone sets the "telephone" field.
func (pc *PeopleCreate) SetTelephone(s string) *PeopleCreate {
	pc.mutation.SetTelephone(s)
	return pc
}

// Mutation returns the PeopleMutation object of the builder.
func (pc *PeopleCreate) Mutation() *PeopleMutation {
	return pc.mutation
}

// Save creates the People in the database.
func (pc *PeopleCreate) Save(ctx context.Context) (*People, error) {
	var (
		err  error
		node *People
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PeopleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PeopleCreate) SaveX(ctx context.Context) *People {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PeopleCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PeopleCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PeopleCreate) check() error {
	if _, ok := pc.mutation.Idnum(); !ok {
		return &ValidationError{Name: "idnum", err: errors.New(`ent: missing required field "idnum"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := pc.mutation.Telephone(); !ok {
		return &ValidationError{Name: "telephone", err: errors.New(`ent: missing required field "telephone"`)}
	}
	return nil
}

func (pc *PeopleCreate) sqlSave(ctx context.Context) (*People, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PeopleCreate) createSpec() (*People, *sqlgraph.CreateSpec) {
	var (
		_node = &People{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: people.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: people.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Idnum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: people.FieldIdnum,
		})
		_node.Idnum = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: people.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Telephone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: people.FieldTelephone,
		})
		_node.Telephone = value
	}
	return _node, _spec
}

// PeopleCreateBulk is the builder for creating many People entities in bulk.
type PeopleCreateBulk struct {
	config
	builders []*PeopleCreate
}

// Save creates the People entities in the database.
func (pcb *PeopleCreateBulk) Save(ctx context.Context) ([]*People, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*People, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PeopleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PeopleCreateBulk) SaveX(ctx context.Context) []*People {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PeopleCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PeopleCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
